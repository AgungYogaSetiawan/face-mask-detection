# -*- coding: utf-8 -*-
"""Face Mask Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
https://colab.research.google.com/drive/1YjVIiv5Am5tLOPOokay9dXXTLBRYc9da#scrollTo=p5_UjV7Ah6jw&uniqifier=2

### Import Required Dependencies
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
import cv2
import streamlit as st
from PIL import Image
from tensorflow.keras import models, layers
from keras.models import load_model

IMAGE_SIZE = 256
BATCH_SIZE = 32
CHANNELS = 3

dataset = tf.keras.preprocessing.image_dataset_from_directory(
    './datasets2',
    batch_size=BATCH_SIZE,
    image_size=(IMAGE_SIZE, IMAGE_SIZE),
    seed=123,
    shuffle=True
)

class_names = dataset.class_names

"""### Build Web App Using Streamlit"""

@st.cache(allow_output_mutation=True)
def load_model():
  model=tf.keras.models.load_model('model.hdf5')
  return model
model=load_model()

st.write("""
# Face Mask Detection Web App with Streamlit
"""
)

camera_input = st.camera_input("Take a picture")
# st.set_option('deprecation.showfileUploaderEncoding', False)

def take_and_predict(image, model):
    
    # img_array = tf.keras.preprocessing.image.img_to_array(image)
    # img_array = tf.expand_dims(img_array, 0)
    predictions = model.predict(image)
    predicted_class = class_names[np.argmax(predictions[0])]
    score = round(100 * (np.max(predictions[0])), 2)
          
    return predicted_class, score

if camera_input:
    # To read image file buffer with OpenCV:
    bytes_data = camera_input.getvalue()
    cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)
    img = cv2.resize(cv2_img,(256,256))
    img = np.reshape(img,[1,256,256,3])
    predicted_class, score = take_and_predict(img, model)
    st.write(f'This image most likely belongs to {predicted_class} with a {score} % confidence.')
else:
    st.text("Please take a photo")

